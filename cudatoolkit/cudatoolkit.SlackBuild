#!/bin/sh

# Copyright 2008-2011  Giorgio Peron Campodarsego, PD, Italy
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# OpenCL C++ bindings (optional). Strangely, they are not included with CUDA Toolkit,
# but in case you use C++, they could make your code much more redable. 
# It can be downloaded from http://www.khronos.org/registry/cl/api/1.1/cl.hpp

PRGNAM=cudatoolkit
VERSION=${VERSION:-4.0.17}
BUILD=${BUILD:-3}
TAG=${TAG:-_SBo}


case "$( uname -m )" in
  i?86) ARCH=i386 ;;
  arm*) ARCH=arm ;;
     *) ARCH=$( uname -m ) ;;
esac

CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

set -e

if [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64" 
  WRONGLIBDIRSUFFIX="" 
  CUDAARCH="64"
  break
elif [ "$ARCH" = "i386" ]; then
  LIBDIRSUFFIX=""
  WRONGLIBDIRSUFFIX="64" 
  CUDAARCH="32"
  break
else
  printf "\n\n$ARCH is not supported... \n"
  exit 1
fi
  
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT 
cd $TMP
rm -rf $PRGNAM-$VERSION
mkdir -p $PRGNAM-$VERSION

chmod +x $CWD/$PRGNAM\_$VERSION\_linux_$CUDAARCH\_fedora13.run
$CWD/$PRGNAM\_$VERSION\_linux_$CUDAARCH\_fedora13.run -- --prefix=$TMP/$PRGNAM-$VERSION

cd $PRGNAM-$VERSION
chown -R root:root .

# Move the docs to our standard location first
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
mv doc/* $PKG/usr/doc/$PRGNAM-$VERSION
rm -rf doc 

# Now move everything else
mkdir -p $PKG/usr/share/cuda
mv * $PKG/usr/share/cuda/

# Put libraries in the standard place
mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}
mv $PKG/usr/share/cuda/lib${LIBDIRSUFFIX} $PKG/usr
rm -rf $PKG/usr/share/cuda/lib${WRONGLIBDIRSUFFIX}
# Link the shared libraries into /usr/lib:
( cd $PKG/usr/lib${LIBDIRSUFFIX}
  for file in ../share/cuda/computeprof/bin/*.so* ; do
    ln -sf $file .
  done
)

# Put binaries in the standard place
mkdir -p $PKG/usr/bin
mv $PKG/usr/share/cuda/bin $PKG/usr/
cd $PKG/usr/bin
ln -s ../share/cuda/open$CUDAARCH/bin/nvopencc nvopencc
ln -s ../share/cuda/computeprof/bin/computeprof computeprof
chmod 0755 $PKG/usr/bin/*

# Put include in the standard place
mkdir -p $PKG/usr/include/cuda
mv $PKG/usr/share/cuda/include/* $PKG/usr/include/cuda
rm -rf $PKG/usr/share/cuda/include 

# add OpenCL C++ bindings and patch host_config.h and nvcc.profile
cat $CWD/files/cl.hpp > $PKG/usr/include/cuda/CL/cl.hpp
cat $CWD/files/host_config.h > $PKG/usr/include/cuda/host_config.h
cat $CWD/files/nvcc.profile > $PKG/usr/bin/nvcc.profile

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -c n -l y $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
